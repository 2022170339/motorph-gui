/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mmdc.motorph;

import com.opencsv.*;
import com.opencsv.exceptions.CsvException;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author redenval
 */
public class EmployeeDashboard extends javax.swing.JFrame {

    String selectedEmployeeId = "";
    static String employeeDataPath = "src/main/resources/employee_data.csv";

    /**
     * Creates new form EmployeeDashboard
     */
    public EmployeeDashboard() {
        initComponents();
        setLocationRelativeTo(null);
        loadEmployeeData();
    }

    private void loadEmployeeData() {
        try {
            DefaultTableModel model = (DefaultTableModel) employeeTable.getModel();
            model.setRowCount(0);

            List<String[]> rows = Helper.readCSV(employeeDataPath);
            String[] headers = rows.remove(0);
            model.setColumnIdentifiers(headers);
            for (int i = 0; i < headers.length; i++) {
                TableColumn column = employeeTable.getColumnModel().getColumn(i);
                column.setMinWidth(120);
                column.setMaxWidth(120);
                column.setPreferredWidth(120);
            }

            for (String[] row : rows) {
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        selectedEmployeeId = "";
        employeeName.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        employeeName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        employeeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        employeeTable.getTableHeader().setReorderingAllowed(false);
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(employeeTable);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        employeeName.setEditable(false);

        jLabel1.setText("Selected Employee:");

        jLabel2.setText("Actions:");

        jButton3.setText("View Details");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(employeeName, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton3)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) employeeTable.getModel();
            model.setRowCount(0);

            List<String[]> rows = Helper.readCSV(employeeDataPath);
            String[] headers = rows.remove(0);
            model.setColumnIdentifiers(headers);
            for (String[] row : rows) {
                if (!searchTextField.getText().isEmpty()) {
                    String keyword = searchTextField.getText();
                    for (String col : row) {
                        if (col.toLowerCase().contains(keyword.toLowerCase())) {
                            model.addRow(row);
                        }
                    }
                    continue;
                }
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new EmployeeDetail(selectedEmployeeId).show();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void employeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseClicked
        int row = employeeTable.getSelectedRow();
        String firstName = employeeTable.getModel().getValueAt(row, 2).toString();
        String lastName = employeeTable.getModel().getValueAt(row, 1).toString();
        employeeName.setText(firstName + " " + lastName);
        selectedEmployeeId = employeeTable.getModel().getValueAt(row, 0).toString();
    }//GEN-LAST:event_employeeTableMouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if(selectedEmployeeId.isEmpty()) return;
        try {
            Employee employee = getEmployee();
            JPanel editEmployeePanel = new EditEmployee(employee);
            Object[] options = {"Update", "Cancel"};
            int res = JOptionPane.showOptionDialog(null, editEmployeePanel, "Edit Employee Details", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null);
            if (res == JOptionPane.YES_OPTION) {
                Employee newEmployee = ((EditEmployee)editEmployeePanel).getEmployee();
                List<String[]> employees = Helper.readCSV(employeeDataPath);
                int index = Helper.findRowIndex(employees, newEmployee.getId());
                employees.set(index, new String[] {newEmployee.getId(), newEmployee.getLastName(),
                    newEmployee.getFirstName(), newEmployee.getBirthday(), newEmployee.getAddress(),
                    newEmployee.getPhoneNumber(), newEmployee.getSss(), newEmployee.getPhilhealth(),
                    newEmployee.getTin(), newEmployee.getPagibig(), newEmployee.getStatus(), newEmployee.getPosition(),
                    newEmployee.getImmediateSupervisor(), newEmployee.getBasicSalary(), newEmployee.getRiceSubsidy(),
                    newEmployee.getPhoneAllowance(), newEmployee.getClothingAllowance(), newEmployee.getGrossSemiMonthlyRate(),
                    newEmployee.getHourlyRate()});
                Helper.writeCSV(employees, employeeDataPath);
            }
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        loadEmployeeData();
    }//GEN-LAST:event_editButtonActionPerformed

    private Employee getEmployee() {
        int row = employeeTable.getSelectedRow();
        selectedEmployeeId = employeeTable.getModel().getValueAt(row, 0).toString();
        String firstName = employeeTable.getModel().getValueAt(row, 2).toString();
        String lastName = employeeTable.getModel().getValueAt(row, 1).toString();
        String birthday = employeeTable.getModel().getValueAt(row, 3).toString();
        String address = employeeTable.getModel().getValueAt(row, 4).toString();
        String phoneNumber = employeeTable.getModel().getValueAt(row, 5).toString();
        String sss = employeeTable.getModel().getValueAt(row, 6).toString();
        String philhealth = employeeTable.getModel().getValueAt(row, 7).toString();
        String tin = employeeTable.getModel().getValueAt(row, 8).toString();
        String pagibig = employeeTable.getModel().getValueAt(row, 9).toString();
        String status = employeeTable.getModel().getValueAt(row, 10).toString();
        String position = employeeTable.getModel().getValueAt(row, 11).toString();
        String immediateSupervisor = employeeTable.getModel().getValueAt(row, 12).toString();
        String basicSalary = employeeTable.getModel().getValueAt(row, 13).toString();
        String riceSubsidy = employeeTable.getModel().getValueAt(row, 14).toString();
        String phoneAllowance = employeeTable.getModel().getValueAt(row, 15).toString();
        String clothingAllowance = employeeTable.getModel().getValueAt(row, 16).toString();
        String grossSemiMonthlyRate = employeeTable.getModel().getValueAt(row, 17).toString();
        String hourlyRate = employeeTable.getModel().getValueAt(row, 18).toString();
        return new Employee(selectedEmployeeId, firstName, lastName, birthday, address, phoneNumber, sss, philhealth, tin, pagibig, status, position, immediateSupervisor, basicSalary, riceSubsidy, phoneAllowance, clothingAllowance, grossSemiMonthlyRate, hourlyRate);
    }

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(selectedEmployeeId.isEmpty()) return;
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?", "Delete Record", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(result == JOptionPane.YES_OPTION) {
            try {
                List<String[]> employees = Helper.readCSV(employeeDataPath);
                int index = Helper.findRowIndex(employees, selectedEmployeeId);
                employees.remove(index);
                Helper.writeCSV(employees, employeeDataPath);
            } catch (IOException ex) {
                Logger.getLogger(EmployeeDashboard.class.getName()).log(Level.SEVERE, null, ex);
            } catch (CsvException ex) {
                Logger.getLogger(EmployeeDashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        loadEmployeeData();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        new EmployeeMain().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField employeeName;
    private javax.swing.JTable employeeTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
